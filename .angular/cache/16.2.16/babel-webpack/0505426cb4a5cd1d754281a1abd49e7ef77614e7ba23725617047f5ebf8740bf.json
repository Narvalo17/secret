{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const token = localStorage.getItem('token');\n    if (token) {\n      // TODO: Vérifier la validité du token\n      this.getCurrentUser().subscribe();\n    }\n  }\n  login(email, password) {\n    return this.http.post(`${environment.apiUrl}/auth/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  register(username, email, password) {\n    return this.http.post(`${environment.apiUrl}/auth/register`, {\n      username,\n      email,\n      password\n    }).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n  }\n  getCurrentUser() {\n    return this.http.get(`${environment.apiUrl}/auth/me`).pipe(tap(user => this.currentUserSubject.next(user)));\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","currentUserSubject","currentUser$","asObservable","token","localStorage","getItem","getCurrentUser","subscribe","login","email","password","post","apiUrl","pipe","response","setItem","next","user","register","username","logout","removeItem","get","isAuthenticated","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Youcef\\Desktop\\Ferhat\\ylhfrt\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // TODO: Vérifier la validité du token\n      this.getCurrentUser().subscribe();\n    }\n  }\n\n  login(email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${environment.apiUrl}/auth/login`, { email, password })\n      .pipe(\n        tap(response => {\n          localStorage.setItem('token', response.token);\n          this.currentUserSubject.next(response.user);\n        })\n      );\n  }\n\n  register(username: string, email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${environment.apiUrl}/auth/register`, { username, email, password })\n      .pipe(\n        tap(response => {\n          localStorage.setItem('token', response.token);\n          this.currentUserSubject.next(response.user);\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n  }\n\n  getCurrentUser(): Observable<User> {\n    return this.http.get<User>(`${environment.apiUrl}/auth/me`)\n      .pipe(\n        tap(user => this.currentUserSubject.next(user))\n      );\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n} "],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,mCAAmC;;;AAgB/D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,kBAAkB,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAO,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT;MACA,IAAI,CAACG,cAAc,EAAE,CAACC,SAAS,EAAE;;EAErC;EAEAC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAe,GAAGf,WAAW,CAACgB,MAAM,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACzFG,IAAI,CACHlB,GAAG,CAACmB,QAAQ,IAAG;MACbV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACX,KAAK,CAAC;MAC7C,IAAI,CAACH,kBAAkB,CAACgB,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC7C,CAAC,CAAC,CACH;EACL;EAEAC,QAAQA,CAACC,QAAgB,EAAEV,KAAa,EAAEC,QAAgB;IACxD,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAe,GAAGf,WAAW,CAACgB,MAAM,gBAAgB,EAAE;MAAEO,QAAQ;MAAEV,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACtGG,IAAI,CACHlB,GAAG,CAACmB,QAAQ,IAAG;MACbV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACX,KAAK,CAAC;MAC7C,IAAI,CAACH,kBAAkB,CAACgB,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC7C,CAAC,CAAC,CACH;EACL;EAEAG,MAAMA,CAAA;IACJhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACrB,kBAAkB,CAACgB,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAV,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACP,IAAI,CAACuB,GAAG,CAAO,GAAG1B,WAAW,CAACgB,MAAM,UAAU,CAAC,CACxDC,IAAI,CACHlB,GAAG,CAACsB,IAAI,IAAI,IAAI,CAACjB,kBAAkB,CAACgB,IAAI,CAACC,IAAI,CAAC,CAAC,CAChD;EACL;EAEAM,eAAeA,CAAA;IACb,OAAO,CAAC,CAACnB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAmB,QAAQA,CAAA;IACN,OAAOpB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;;;uBAlDWR,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX/B,WAAW;MAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}